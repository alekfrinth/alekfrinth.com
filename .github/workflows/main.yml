# Author: Vladyslav Marchenko

name: Deploy Next.js site to Pages
# This is the name of the workflow, which is displayed in the GitHub Actions UI.

on:
  push:
    branches: ["main"]
  workflow_dispatch:
# This specifies when the workflow should run. In this case, it runs on 'push' events to the 'main' branch and can also be manually triggered with 'workflow_dispatch'.

permissions:
  contents: read
  pages: write
  id-token: write
# These permissions define what the workflow can access and do. It has read access to contents and write access to pages and id-token.

concurrency:
  group: "pages"
  cancel-in-progress: false
# Concurrency settings help manage multiple workflow runs. It's part of a group named "pages," and it won't cancel a run if another one is in progress.

jobs:
  build:
    runs-on: ubuntu-latest
    # This specifies that the job will run on the latest version of Ubuntu.
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # This step checks out the repository code.

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
        # This step detects the package manager (Yarn or npm) used in the project and sets up corresponding commands.

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
        # This step sets up Node.js based on the LTS version and caches the package manager to speed up future runs.

      - name: Setup Pages
        uses: actions/configure-pages@v3
        # This step configures GitHub Pages settings.

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
        # This step restores cached files to speed up the workflow, based on changes to package-lock or yarn.lock files.

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        # This step installs project dependencies using the detected package manager.

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        # This step builds the Next.js application.

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out
        # This step uploads the build artifacts to GitHub Pages.

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    # This 'deploy' job runs on Ubuntu, and it depends on the 'build' job.
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        # This step deploys the site to GitHub Pages.

  purge-cache:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Send API request to CloudFlare
        run: |
          set -ex
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLAREZONEID }}/purge_cache" \
                          -H "Authorization: Bearer ${{ secrets.CLOUDFLAREPURGETOKEN }}" \
                          -H "Content-Type: application/json" \
                          --data '{"purge_everything":true}' | jq '.success'

